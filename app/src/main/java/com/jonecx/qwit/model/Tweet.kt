package com.jonecx.qwit.model

import com.squareup.moshi.Json

data class Tweet(
    @Json(name = "created_at")
    val createdAt: String,
    @Json(name = "id")
    val id: Long,
    @Json(name = "id_str")
    val idStr: String,
    @Json(name = "text")
    val text: String,
    @Json(name = "truncated")
    val isTruncated: Boolean,
    @Json(name = "entities")
    val entities: Entities,
    @Json(name = "extended_entities")
    val extendedEntities: ExtendedEntities,
    @Json(name = "source")
    val source: String,
    @Json(name = "in_reply_to_status_id")
    val inReplyToStatusId: Long?,
    @Json(name = "in_reply_to_status_id_str")
    val inReplyToStatusIdStr: String?,
    @Json(name = "in_reply_to_user_id")
    val inReplyToUserId: Long?,
    @Json(name = "in_reply_to_user_id_str")
    val inReplyToUserIdStr: String?,
    @Json(name = "in_reply_to_screen_name")
    val inReplyToScreenName: String?,
    @Json(name = "user")
    val user: User?,
    @Json(name = "geo")
    val geo: Geo?,
    @Json(name = "coordinates")
    val coordinates: Coordinates?,
    @Json(name = "place")
    val place: Place?,
    @Json(name = "contributors")
    val contributors: String?,
    @Json(name = "quoted_status_id")
    val quotedStatusId: Long?,
    @Json(name = "quoted_status_id_str")
    val quotedStatusIdStr: String?,
    @Json(name = "is_quote_status")
    val isQuoteStatus: Boolean,
    @Json(name = "quote_count")
    val quotedCount: Int?,
    @Json(name = "quoted_status")
    val qoutedStatus: Tweet?,
    @Json(name = "reply_count")
    val replyCount: Int?,
    @Json(name = "retweeted_status")
    val retweetedStatus: Tweet?,
    @Json(name = "retweet_count")
    val retweetCount: String?,
    @Json(name = "favorite_count")
    val favoriteCount: Int?,
    @Json(name = "favorited")
    val isFavorited: Boolean,
    @Json(name = "retweeted")
    val isRetweeted: Boolean,
    @Json(name = "possibly_sensitive")
    val isSensitive: Boolean,
    @Json(name = "filter_level")
    val filterLevel: FilterLevel,
    @Json(name = "lang")
    val lang: String?,
    @Json(name = "matching_rules")
    val matchingRule: MatchingRule?
)

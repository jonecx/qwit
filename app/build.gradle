plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.spotify.ruler'
}

def oauthKeyFile = rootProject.file("oauth_keys.properties")
def oauthKeys = new Properties()
oauthKeys.load(new FileInputStream(oauthKeyFile))

android {
    compileSdk AppConfig.appCompileSdkVersion

    defaultConfig {
        applicationId AppConfig.appId
        minSdk AppConfig.appMinSdk
        targetSdk AppConfig.appTargetSdk
        versionCode AppConfig.appVersionCode
        versionName AppConfig.appVersionName

        buildConfigField("String", "API_HOST", oauthKeys['API_HOST'])
        buildConfigField("String", "CONSUMER_KEY", oauthKeys['CONSUMER_KEY'])
        buildConfigField("String", "CONSUMER_SECRET", oauthKeys['CONSUMER_SECRET'])
        buildConfigField("String", "ACCESS_TOKEN", oauthKeys['ACCESS_TOKEN'])
        buildConfigField("String", "ACCESS_SECRET", oauthKeys['ACCESS_SECRET'])
        buildConfigField("String", "CALLBACK_SCHEME", oauthKeys['CALLBACK_SCHEME'])
        buildConfigField("String", "CALLBACK_URL", oauthKeys['CALLBACK_URL'])
        buildConfigField("String", "OAUTH_VERIFIER", oauthKeys['OAUTH_VERIFIER'])
        buildConfigField("String", "OAUTH_TOKEN", oauthKeys['OAUTH_TOKEN'])
        buildConfigField("String", "OAUTH_TOKEN_SECRET", oauthKeys['OAUTH_TOKEN_SECRET'])
        buildConfigField("String", "USER_ID", oauthKeys['USER_ID'])
        buildConfigField("String", "SCREEN_NAME", oauthKeys['SCREEN_NAME'])

        testInstrumentationRunner Testing.testInstrumentationRunner
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion Versions.compose_compiler
    }
    
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'com.jonecx.qwit'
}

dependencies {
    implementation Koin.koinCore
    implementation Koin.koinAndroid
    implementation Koin.koinCompose
    implementation Timber.timber
    implementation Kotlin.coreKtx
    implementation Appcompat.appcompat
    implementation MaterialDesign.material
    implementation MaterialDesign.material3
    implementation MaterialDesign.material3WindowSize
    implementation Compose.composeUi
    implementation Compose.composeActivity
    implementation Compose.composeMaterial
    implementation Compose.composePreviewTool
    implementation Compose.composeNavigation
    implementation Compose.composeNavigationCommon
    implementation LifeCycle.lifeCycle
    implementation LifeCycle.composeLifecycle
    implementation Retrofit.retrofit
    implementation Retrofit.moshConverter
    implementation(enforcedPlatform(OkHttp.okttpBom))
    implementation DataStore.dataStorePreferences
    testImplementation Testing.junit
    testImplementation Koin.koinTest
    testImplementation Testing.mockitoCore
    androidTestImplementation Testing.junitExt
    androidTestImplementation Testing.espressoCore
    androidTestImplementation Compose.composeJunit
    debugImplementation Compose.composeUiTooling
    debugImplementation Compose.composeManifestTest
    implementation Tracing.tracing
}

ruler {
    abi.set("arm64-v8a")
    locale.set("en")
    screenDensity.set(480)
    sdkVersion.set(30)
}